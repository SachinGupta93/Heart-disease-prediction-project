"""
Flask API for the Heart Disease Prediction project.
"""

import os
import logging
import joblib
import numpy as np
import pandas as pd
from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_restx import Api, Resource, fields
from tensorflow.keras.models import load_model
from config import Config

# Load configuration
config = Config()

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__)
CORS(app)
api = Api(app, version='1.0', title='Heart Disease Prediction API',
          description='An API for predicting heart disease risk using machine learning models')

# Create namespaces
prediction_ns = api.namespace('predictions', description='Prediction operations')
model_ns = api.namespace('models', description='Model information')
health_ns = api.namespace('health', description='Health check')

# Load models and scalers
try:
    logger.info(f"Loading Random Forest model from {config.RF_MODEL_PATH}")
    rf_model = joblib.load(config.RF_MODEL_PATH)
    
    logger.info(f"Loading scaler from {config.RF_SCALER_PATH}")
    scaler = joblib.load(config.RF_SCALER_PATH)
    
    logger.info(f"Loading Neural Network model from {config.NN_MODEL_PATH}")
    nn_model = load_model(config.NN_MODEL_PATH)
    
    # Load feature importance
    feature_importance_path = os.path.join(config.MODEL_DIR, "feature_importance.csv")
    if os.path.exists(feature_importance_path):
        feature_importance = pd.read_csv(feature_importance_path)
    else:
        feature_importance = None
        logger.warning(f"Feature importance file not found at {feature_importance_path}")
    
    logger.info("All models loaded successfully")
except Exception as e:
    logger.exception(f"Error loading models: {str(e)}")
    raise

# Define input models for API documentation
prediction_input = api.model('PredictionInput', {
    'age': fields.Float(required=True, description='Patient age in years', min=0, max=120),
    'sex': fields.Integer(required=True, description='Patient sex (0 = female, 1 = male)', min=0, max=1),
    'cp': fields.Integer(required=True, description='Chest pain type (0-3)', min=0, max=3),
    'trestbps': fields.Float(required=True, description='Resting blood pressure in mm Hg', min=0),
    'chol': fields.Float(required=True, description='Serum cholesterol in mg/dl', min=0),
    'fbs': fields.Integer(required=True, description='Fasting blood sugar > 120 mg/dl (0 = false, 1 = true)', min=0, max=1),
    'restecg': fields.Integer(required=True, description='Resting electrocardiographic results (0-2)', min=0, max=2),
    'thalach': fields.Float(required=True, description='Maximum heart rate achieved', min=0),
    'exang': fields.Integer(required=True, description='Exercise induced angina (0 = no, 1 = yes)', min=0, max=1),
    'oldpeak': fields.Float(required=True, description='ST depression induced by exercise relative to rest', min=0),
    'slope': fields.Integer(required=True, description='Slope of the peak exercise ST segment (0-2)', min=0, max=2),
    'ca': fields.Integer(required=True, description='Number of major vessels colored by fluoroscopy (0-3)', min=0, max=3),
    'thal': fields.Integer(required=True, description='Thalassemia type (1-3)', min=1, max=3)
})

# Helper function to validate input data
def validate_input(data):
    """Validate input data against expected ranges and types."""
    errors = []
    
    # Check required fields
    required_fields = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 
                      'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal']
    
    for field in required_fields:
        if field not in data:
            errors.append(f"Missing required field: {field}")
    
    if errors:
        return False, errors
    
    # Validate ranges
    if not 0 <= data['age'] <= 120:
        errors.append("Age must be between 0 and 120")
    
    if data['sex'] not in [0, 1]:
        errors.append("Sex must be 0 (female) or 1 (male)")
    
    if data['cp'] not in [0, 1, 2, 3]:
        errors.append("Chest pain type must be between 0 and 3")
    
    if data['trestbps'] <= 0:
        errors.append("Resting blood pressure must be positive")
    
    if data['chol'] <= 0:
        errors.append("Cholesterol must be positive")
    
    if data['fbs'] not in [0, 1]:
        errors.append("Fasting blood sugar must be 0 or 1")
    
    if data['restecg'] not in [0, 1, 2]:
        errors.append("Resting ECG results must be between 0 and 2")
    
    if data['thalach'] <= 0:
        errors.append("Maximum heart rate must be positive")
    
    if data['exang'] not in [0, 1]:
        errors.append("Exercise induced angina must be 0 or 1")
    
    if data['oldpeak'] < 0:
        errors.append("ST depression must be non-negative")
    
    if data['slope'] not in [0, 1, 2]:
        errors.append("Slope must be between 0 and 2")
    
    if not 0 <= data['ca'] <= 3:
        errors.append("Number of major vessels must be between 0 and 3")
    
    if not 1 <= data['thal'] <= 3:
        errors.append("Thalassemia type must be between 1 and 3")
    
    return len(errors) == 0, errors

# Helper function to prepare input data for prediction
def prepare_input_data(data):
    """Prepare input data for model prediction."""
    # Extract features in the correct order
    features = [
        'age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg',
        'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal'
    ]
    
    input_data = [float(data[feature]) for feature in features]
    return np.array(input_data).reshape(1, -1)

@prediction_ns.route('/')
class PredictionResource(Resource):
    @prediction_ns.expect(prediction_input)
    def post(self):
        """Make a heart disease prediction using the Random Forest model."""
        try:
            # Get data from request
            data = request.get_json(force=True)
            logger.info(f"Received prediction request: {data}")
            
            # Validate input data
            is_valid, errors = validate_input(data)
            if not is_valid:
                logger.warning(f"Invalid input data: {errors}")
                return {'error': 'Invalid input data', 'details': errors}, 400
            
            # Prepare input data
            input_data = prepare_input_data(data)
            
            # Scale features
            scaled_features = scaler.transform(input_data)
            
            # Make prediction
            prediction = rf_model.predict(scaled_features)[0]
            probability = rf_model.predict_proba(scaled_features)[0][1]
            
            # Prepare response
            response = {
                'prediction': int(prediction),
                'probability': float(probability),
                'message': 'Heart disease detected' if prediction == 1 else 'No heart disease detected'
            }
            
            logger.info(f"Prediction result: {response}")
            return response, 200
            
        except Exception as e:
            logger.exception(f"Error during prediction: {str(e)}")
            return {'error': 'An error occurred during prediction', 'details': str(e)}, 500

@prediction_ns.route('/compare')
class ComparisonResource(Resource):
    @prediction_ns.expect(prediction_input)
    def post(self):
        """Compare predictions from Random Forest and Neural Network models."""
        try:
            # Get data from request
            data = request.get_json(force=True)
            logger.info(f"Received model comparison request: {data}")
            
            # Validate input data
            is_valid, errors = validate_input(data)
            if not is_valid:
                logger.warning(f"Invalid input data: {errors}")
                return {'error': 'Invalid input data', 'details': errors}, 400
            
            # Prepare input data
            input_data = prepare_input_data(data)
            
            # Scale features
            scaled_features = scaler.transform(input_data)
            
            # Make predictions with Random Forest
            rf_prediction = rf_model.predict(scaled_features)[0]
            rf_probability = rf_model.predict_proba(scaled_features)[0][1]
            
            # Make predictions with Neural Network
            nn_probability = nn_model.predict(scaled_features)[0][0]
            nn_prediction = 1 if nn_probability > 0.5 else 0
            
            # Check if models agree
            agreement = rf_prediction == nn_prediction
            
            # Prepare response
            response = {
                'random_forest': {
                    'prediction': int(rf_prediction),
                    'probability': float(rf_probability),
                    'message': 'Heart disease detected' if rf_prediction == 1 else 'No heart disease detected'
                },
                'neural_network': {
                    'prediction': int(nn_prediction),
                    'probability': float(nn_probability),
                    'message': 'Heart disease detected' if nn_prediction == 1 else 'No heart disease detected'
                },
                'agreement': bool(agreement)
            }
            
            logger.info(f"Model comparison result: {response}")
            return response, 200
            
        except Exception as e:
            logger.exception(f"Error during model comparison: {str(e)}")
            return {'error': 'An error occurred during model comparison', 'details': str(e)}, 500

@model_ns.route('/feature-importance')
class FeatureImportanceResource(Resource):
    def get(self):
        """Get feature importance from the Random Forest model."""
        try:
            if feature_importance is None:
                return {'error': 'Feature importance data not available'}, 404
            
            # Prepare response with feature importance data
            response = []
            for _, row in feature_importance.iterrows():
                feature_name = row['feature']
                importance = row['importance']
                
                # Add descriptions for each feature
                description = get_feature_description(feature_name)
                
                response.append({
                    'feature': feature_name,
                    'importance': float(importance),
                    'description': description
                })
            
            logger.info(f"Returning feature importance for {len(response)} features")
            return response, 200
            
        except Exception as e:
            logger.exception(f"Error getting feature importance: {str(e)}")
            return {'error': 'An error occurred while retrieving feature importance', 'details': str(e)}, 500

def get_feature_description(feature_name):
    """Get description for a feature."""
    descriptions = {
        'age': 'Age in years - risk increases with age',
        'sex': 'Gender (0 = female, 1 = male) - men generally have higher risk',
        'cp': 'Chest pain type - certain types are more associated with heart disease',
        'trestbps': 'Resting blood pressure in mm Hg - higher values indicate higher risk',
        'chol': 'Serum cholesterol in mg/dl - high cholesterol is a risk factor',
        'fbs': 'Fasting blood sugar > 120 mg/dl - indicator of diabetes, a risk factor',
        'restecg': 'Resting electrocardiographic results - abnormalities can indicate heart issues',
        'thalach': 'Maximum heart rate achieved - lower max heart rate can indicate problems',
        'exang': 'Exercise induced angina - chest pain during exercise is a warning sign',
        'oldpeak': 'ST depression induced by exercise - greater depression indicates higher risk',
        'slope': 'Slope of the peak exercise ST segment - certain patterns indicate risk',
        'ca': 'Number of major vessels colored by fluoroscopy - more vessels with issues means higher risk',
        'thal': 'Thalassemia type - a blood disorder that can affect heart function'
    }
    
       # For engineered features
    if 'age_group' in feature_name:
        return 'Age group category - different age groups have different risk levels'
    elif 'thalach_age_ratio' in feature_name:
        return 'Ratio of maximum heart rate to age - indicates cardiovascular fitness'
    elif 'bp_category' in feature_name:
        return 'Blood pressure category - higher categories indicate higher risk'
    elif 'chol_category' in feature_name:
        return 'Cholesterol level category - higher categories indicate higher risk'
    
    # Default description if feature not found
    return descriptions.get(feature_name, 'No description available')

@health_ns.route('/')
class HealthCheckResource(Resource):
    def get(self):
        """Health check endpoint to verify API is running."""
        return {'status': 'OK', 'message': 'API is running'}, 200

if __name__ == '__main__':
    port = int(os.getenv("PORT", config.API_PORT))
    debug_mode = os.getenv("DEBUG", str(config.DEBUG_MODE)).lower() == "true"
    app.run(host=config.API_HOST, port=port, debug=debug_mode)

